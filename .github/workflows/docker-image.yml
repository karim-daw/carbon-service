name: Build and Push Docker Image

on:
  push:
    # branches:
    #   - master
    tags:
      - "v*"

env:
  IMAGE_NAME: karimdaw/carbon-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version tag and short SHA
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          fi
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

      - name: Prepare tags
        run: |
          TAGS="${{ env.IMAGE_NAME }}:sha-${{ env.SHORT_SHA }}"
          if [ -n "${{ env.VERSION_TAG }}" ]; then
            TAGS="${TAGS},${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.TAGS }}
          build-args: |
            VERSION=${{ env.VERSION_TAG }}
            COMMIT_SHA=${{ env.SHORT_SHA }}

deploy:
  needs: build-and-push
  runs-on: ubuntu-latest
  if: contains(github.ref, 'refs/tags/')
  steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_INSTANCE_IP }} "\
        docker pull ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }} && \
        docker stop my_container || true && \
        docker rm my_container || true && \
        docker run --name my_container --detach --rm -p 80:8080 ${{ env.IMAGE_NAME }}:${{ env.VERSION_TAG }}"
